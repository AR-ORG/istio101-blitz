apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
  labels:
    app: redis
    role: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      role: master
  template:
    metadata:
      labels:
        app: redis
        role: master
    spec:
      containers:
      - name: redis-master
        image: redis:2.8.23
        ports:
        - name: redis-server
          containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  labels:
    app: redis
    role: master
spec:
  ports:
  - port: 6379
    targetPort: redis-server
  selector:
    app: redis
    role: master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-slave
  labels:
    app: redis
    role: slave
spec:
  replicas: 2
  selector:
    matchLabels:
      app: redis
      role: slave
  template:
    metadata:
      labels:
        app: redis
        role: slave
    spec:
      containers:
      - name: redis-slave
        image: kubernetes/redis-slave:v2
        ports:
        - name: redis-server
          containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis-slave
  labels:
    app: redis
    role: slave
spec:
  ports:
  - port: 6379
    targetPort: redis-server
  selector:
    app: redis
    role: slave
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: guestbook-v2
  labels:
    app: guestbook
    version: "2.0"
spec:
  selector:
    matchLabels:
      app: guestbook
  replicas: 2
  template:
    metadata:
      labels:
        app: guestbook
        version: "2.0"
    spec:
      containers:
      - name: guestbook
        image: nibalizer/guestbook:v2
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - name: http
          containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: guestbook
  labels:
    app: guestbook
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 3000
    name: http
  selector:
    app: guestbook
---
apiVersion: v1
kind: Service
metadata:
  name: avatar
  labels:
    app: avatar
spec:
  # comment or delete the following line if you want to use a LoadBalancer
  # type: NodePort
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  # type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3005
    name: http
  selector:
    app: avatar
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: avatar
  labels:
    app: avatar
spec:
  selector:
    matchLabels:
      app: avatar
  replicas: 1
  template:
    metadata:
      labels:
        app: avatar
    spec:
      containers:
      - name: avatar
        image: svennam92/avatar:v1
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 3005
          name: http
